colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="value of improvements"
shrinkLegend=0.4
title="Amount HH Spent on Improvements to the Home"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot=projectData$Value_of_Repairs
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="value of repairs"
shrinkLegend=0.4
title="Amount HH Spent on Repairs to the Home"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot=projectData$MPesa_Use
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="MPesa Use"
shrinkLegend=0.4
title="Does the HH Use Mobile Money (MPesa)"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
library(car)
scatterplotMatrix(projectData[,c(2:4)],
main="Simple Scatterplot Matrix")
# Chunk 1
#pull in data
linkRegions= 'https://github.com/efweavs1989/PUBPOL599B_DATA/blob/master/hh_sec_a.csv?raw=true'
region=read.csv(linkRegions)
i_link= 'https://github.com/efweavs1989/PUBPOL599B_DATA/raw/master/hh_sec_i.csv'
i_data= read.csv(i_link)
q1_link= 'https://github.com/efweavs1989/PUBPOL599B_DATA/raw/master/hh_sec_q1.csv'
q1_data= read.csv(q1_link)
region=region[,c("y4_hhid","hh_a01_1", "hh_a01_2")]
i_data=i_data[,c("y4_hhid","hh_i05","hh_i06","hh_i08","hh_i09","hh_i10")]
q1_data=q1_data[,c("y4_hhid","hh_q01_1","hh_q01_2","hh_q01_3","hh_q01_4")]
i_reg=merge(region,i_data)
projectData=merge(i_reg,q1_data)
names(projectData)=gsub("y4_hhid", "Household_ID", names(projectData))
names(projectData)=gsub("hh_a01_1", "Region_Code", names(projectData))
names(projectData)=gsub("hh_a01_2", "Region_Name", names(projectData))
names(projectData)=gsub("hh_i05", "Value_of_Repairs", names(projectData))
names(projectData)=gsub("hh_i06", "Value_of_Improvements", names(projectData))
names(projectData)=gsub("hh_i08", "Wall_Material", names(projectData))
names(projectData)=gsub("hh_i09", "Roof_Material", names(projectData))
names(projectData)=gsub("hh_i10", "Floor_Material", names(projectData))
names(projectData)=gsub("hh_q01_1", "MPesa_Use", names(projectData))
names(projectData)=gsub("hh_q01_2", "Ezy_Pesa_Use", names(projectData))
names(projectData)=gsub("hh_q01_3", "Airtel_Use", names(projectData))
names(projectData)=gsub("hh_q01_4", "Tigo_Pesa_Use", names(projectData))
(mean_variables=aggregate(cbind(Value_of_Repairs, Value_of_Improvements, MPesa_Use, Ezy_Pesa_Use, Airtel_Use, Tigo_Pesa_Use) ~ Region_Code, data=projectData, FUN=mean))
getMode=function(aColumn){
freqTable=table(aColumn)
maxFrequency=max(freqTable)
names(freqTable[freqTable==maxFrequency])[1]
}
mode_variables=aggregate(cbind(Wall_Material, Roof_Material, Floor_Material) ~ Region_Code, data=projectData, FUN=getMode)
projectData=merge(mean_variables,mode_variables)
projectData$Region_Code=gsub(51, 26, projectData$Region_Code)
projectData$Region_Code=gsub(52, 27, projectData$Region_Code)
projectData$Region_Code=gsub(53, 28, projectData$Region_Code)
projectData$Region_Code=gsub(54, 29, projectData$Region_Code)
projectData$Region_Code=gsub(55, 30, projectData$Region_Code)
projectData$Region_Code
projectData$Region_Code=as.numeric(projectData$Region_Code)
# Chunk 2: location
summary(projectData$Value_of_Improvements)
# Chunk 3
library(car)
scatterplotMatrix(projectData[,c(2:3)],
main="Simple Scatterplot Matrix")
linkRegions= 'https://github.com/efweavs1989/PUBPOL599B_DATA/blob/master/hh_sec_a.csv?raw=true'
region=read.csv(linkRegions)
i_link= 'https://github.com/efweavs1989/PUBPOL599B_DATA/raw/master/hh_sec_i.csv'
i_data= read.csv(i_link)
q1_link= 'https://github.com/efweavs1989/PUBPOL599B_DATA/raw/master/hh_sec_q1.csv'
q1_data= read.csv(q1_link)
names(region)
region=region[,c("y4_hhid","hh_a01_1", "hh_a01_2")]
names(i_data)
i_data=i_data[,c("y4_hhid","hh_i05","hh_i06","hh_i08","hh_i09","hh_i10")]
names(q1_data)
q1_data=q1_data[,c("y4_hhid","hh_q01_1","hh_q01_2","hh_q01_3","hh_q01_4")]
i_reg=merge(region,i_data)
projectData=merge(i_reg,q1_data)
str(projectData)
names(projectData)=gsub("y4_hhid", "Household_ID", names(projectData))
names(projectData)=gsub("hh_a01_1", "Region_Code", names(projectData))
names(projectData)=gsub("hh_a01_2", "Region_Name", names(projectData))
names(projectData)=gsub("hh_i05", "Value_of_Repairs", names(projectData))
names(projectData)=gsub("hh_i06", "Value_of_Improvements", names(projectData))
names(projectData)=gsub("hh_i08", "Wall_Material", names(projectData))
names(projectData)=gsub("hh_i09", "Roof_Material", names(projectData))
names(projectData)=gsub("hh_i10", "Floor_Material", names(projectData))
names(projectData)=gsub("hh_q01_1", "MPesa_Use", names(projectData))
names(projectData)=gsub("hh_q01_2", "Ezy_Pesa_Use", names(projectData))
names(projectData)=gsub("hh_q01_3", "Airtel_Use", names(projectData))
names(projectData)=gsub("hh_q01_4", "Tigo_Pesa_Use", names(projectData))
names(projectData)
(mean_variables=aggregate(cbind(Value_of_Repairs, Value_of_Improvements, MPesa_Use, Ezy_Pesa_Use, Airtel_Use, Tigo_Pesa_Use) ~ Region_Code, data=projectData, FUN=mean))
getMode=function(aColumn){
freqTable=table(aColumn)
maxFrequency=max(freqTable)
names(freqTable[freqTable==maxFrequency])[1]
}
(mode_variables=aggregate(cbind(Wall_Material, Roof_Material, Floor_Material) ~ Region_Code, data=projectData, FUN=getMode))
projectData=merge(mean_variables,mode_variables)
projectData$Region_Code=gsub(51, 26, projectData$Region_Code)
projectData$Region_Code=gsub(52, 27, projectData$Region_Code)
projectData$Region_Code=gsub(53, 28, projectData$Region_Code)
projectData$Region_Code=gsub(54, 29, projectData$Region_Code)
projectData$Region_Code=gsub(55, 30, projectData$Region_Code)
projectData$Region_Code
projectData$Region_Code=as.numeric(projectData$Region_Code)
projectData$Region_Code
summary(projectData$Value_of_Improvements)
sd(projectData$Value_of_Improvements,na.rm = T)
library(moments)
skewness(projectData$Value_of_Improvements,na.rm = T)
kurtosis(projectData$Value_of_Improvements,na.rm = T)
library(ggplot2)
# keeping non missing:
data=projectData[is.finite(projectData$Value_of_Improvements),]
#
# selecting a var:
var=data$Value_of_Improvements
#
# saving mean and sd:
mnVar=mean(var,na.rm = T)
sdVar=sd(var,na.rm = T)
#
#plotting
base = ggplot(data, aes(x=var))
hist = base + geom_histogram(fill="green",
color='grey',
aes(y=..density..))
#
histAndNormal = hist + stat_function(fun=dnorm,
color="red",
args=list(mean=mnVar,sd=sdVar))
#
histAndNormal
str(projectData)
res <- cor(projectData[,c(2:7)],use='complete.obs')
round(res, 2)
library(car)
scatterplotMatrix(projectData[,c(2:3,5)],
main="Simple Scatterplot Matrix")
projectData$Roof_Material_Name[projectData$Roof_Material==1] <- "Grass, Leaves, Bamboo"
projectData$Roof_Material_Name[projectData$Roof_Material==4] <- "Metal Sheets"
projectData=projectData[complete.cases(projectData),]
p <- ggplot(projectData, aes(Roof_Material_Name,Value_of_Improvements))
p + geom_boxplot() + labs(title="The Value of Improvements by Roof Material") + scale_x_discrete(name = "Roof Material") +
scale_y_continuous(name = "Value of Improvements\nMade to the Home")
projectData$Wall_Material_Name[projectData$Wall_Material==2] <- "Poles & Mud/Mud & Stones"
projectData$Wall_Material_Name[projectData$Wall_Material==4] <- "Mud Bricks"
projectData$Wall_Material_Name[projectData$Wall_Material==5] <- "Baked/Burnt Bricks"
projectData$Wall_Material_Name[projectData$Wall_Material==6] <- "Concrete, Cement, Stones"
projectData=projectData[complete.cases(projectData),]
p <- ggplot(projectData, aes(Wall_Material_Name,Value_of_Improvements))
p + geom_boxplot() + labs(title="The Value of Improvements by Wall Material")+scale_x_discrete(name = "Wall Material") +
scale_y_continuous(name = "Value of Improvements\nMade to the Home")
projectData$Floor_Material_Name[projectData$Floor_Material==1] <- "Earth"
projectData$Floor_Material_Name[projectData$Floor_Material==2] <- "Concrete, Cement, Tiles, Timber"
projectData=projectData[complete.cases(projectData),]
p <- ggplot(projectData, aes(Floor_Material_Name,Value_of_Improvements))
p + geom_boxplot() + labs(title="The Value of Improvements by Floor Material")+scale_x_discrete(name = "Floor Material") +
scale_y_continuous(name = "Value of Improvements\nMade to the Home")
length(projectData$Region_Code)==length(unique(projectData$Region_Code))
row.names(projectData)=projectData$Region_Code
str(projectData[,c(1:7)])
res2 <- cor(projectData[,c(4:7)],use='complete.obs')
round(res2, 2)
library(cluster)
demoSimi=daisy(projectData[,c(1:3,5,6)],metric = "euclidean",
stand=TRUE) # standardizing
demoClus=hclust(demoSimi,method = 'average')
plot(demoClus,cex=0.5)
plot(demoClus,cex=0.3)
rect.hclust(demoClus, k = 5,border = c('orange','blue','red','green','purple'))
demsil5=silhouette(cutree(demoClus, k = 5), demoSimi)
clust5solution=data.frame(matrix(demsil5,ncol = 3,dimnames =dimnames(demsil5)))
row.names(clust5solution)=projectData$Region_Code
clust5solution
# saving solution chosen
solution=clust5solution
# creating country column
solution$Region_Code=row.names(clust5solution)
row.names(solution)=NULL # resetting rownames
# merging
projectData=merge(projectData,solution)
str(projectData)
palette=c('blue','orange','red','green','purple')
scatterplotMatrix(projectData[,c(2:7)], diagonal='histogram',reg.line=NULL , smoother=NULL,groups = projectData$cluster,col = palette,legend.plot=F)
compressedMap= "https://github.com/efweavs1989/PUBPOL599B_Project/raw/master/TZA_adm_shp.zip"
library(utils)
temp=tempfile()
download.file(compressedMap, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
library(rgdal)
TZMap <- rgdal::readOGR("TZA_adm1.shp",stringsAsFactors=F) # use name
names(TZMap)
TZMap=TZMap[,c('ID_1')]
str(TZMap$ID_1)
TZMap$ID_1=as.numeric(TZMap$ID_1)
str(TZMap$ID_1)
contribTZmap=merge(TZMap,projectData, by.x='ID_1', by.y='Region_Code',all.x=F)
library(RColorBrewer)
library(classInt)
varToPLot=projectData$cluster
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="clusters"
shrinkLegend=0.4
title="Plot of Variable Clusters"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot=projectData$Value_of_Improvements
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="value of improvements"
shrinkLegend=0.4
title="Amount HH Spent on Improvements to the Home"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot=projectData$Value_of_Repairs
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="value of repairs"
shrinkLegend=0.4
title="Amount HH Spent on Repairs to the Home"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot=projectData$Ezy_Pesa_Use
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="Ezy Pesa Use"
shrinkLegend=0.4
title="Does the HH Use Mobile Money (Ezy Pesa)"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
linkRegions= 'https://github.com/efweavs1989/PUBPOL599B_DATA/blob/master/hh_sec_a.csv?raw=true'
region=read.csv(linkRegions)
i_link= 'https://github.com/efweavs1989/PUBPOL599B_DATA/raw/master/hh_sec_i.csv'
i_data= read.csv(i_link)
q1_link= 'https://github.com/efweavs1989/PUBPOL599B_DATA/raw/master/hh_sec_q1.csv'
q1_data= read.csv(q1_link)
names(region)
region=region[,c("y4_hhid","hh_a01_1", "hh_a01_2")]
names(i_data)
i_data=i_data[,c("y4_hhid","hh_i05","hh_i06","hh_i08","hh_i09","hh_i10")]
names(q1_data)
q1_data=q1_data[,c("y4_hhid","hh_q01_1","hh_q01_2","hh_q01_3","hh_q01_4")]
i_reg=merge(region,i_data)
projectData=merge(i_reg,q1_data)
str(projectData)
names(projectData)=gsub("y4_hhid", "Household_ID", names(projectData))
names(projectData)=gsub("hh_a01_1", "Region_Code", names(projectData))
names(projectData)=gsub("hh_a01_2", "Region_Name", names(projectData))
names(projectData)=gsub("hh_i05", "Value_of_Repairs", names(projectData))
names(projectData)=gsub("hh_i06", "Value_of_Improvements", names(projectData))
names(projectData)=gsub("hh_i08", "Wall_Material", names(projectData))
names(projectData)=gsub("hh_i09", "Roof_Material", names(projectData))
names(projectData)=gsub("hh_i10", "Floor_Material", names(projectData))
names(projectData)=gsub("hh_q01_1", "MPesa_Use", names(projectData))
names(projectData)=gsub("hh_q01_2", "Ezy_Pesa_Use", names(projectData))
names(projectData)=gsub("hh_q01_3", "Airtel_Use", names(projectData))
names(projectData)=gsub("hh_q01_4", "Tigo_Pesa_Use", names(projectData))
names(projectData)
(mean_variables=aggregate(cbind(Value_of_Repairs, Value_of_Improvements, MPesa_Use, Ezy_Pesa_Use, Airtel_Use, Tigo_Pesa_Use) ~ Region_Code, data=projectData, FUN=mean))
getMode=function(aColumn){
freqTable=table(aColumn)
maxFrequency=max(freqTable)
names(freqTable[freqTable==maxFrequency])[1]
}
(mode_variables=aggregate(cbind(Wall_Material, Roof_Material, Floor_Material) ~ Region_Code, data=projectData, FUN=getMode))
projectData=merge(mean_variables,mode_variables)
projectData$Region_Code=gsub(51, 26, projectData$Region_Code)
projectData$Region_Code=gsub(52, 27, projectData$Region_Code)
projectData$Region_Code=gsub(53, 28, projectData$Region_Code)
projectData$Region_Code=gsub(54, 29, projectData$Region_Code)
projectData$Region_Code=gsub(55, 30, projectData$Region_Code)
projectData$Region_Code
projectData$Region_Code=as.numeric(projectData$Region_Code)
projectData$Region_Code
summary(projectData$Value_of_Improvements)
sd(projectData$Value_of_Improvements,na.rm = T)
library(moments)
skewness(projectData$Value_of_Improvements,na.rm = T)
kurtosis(projectData$Value_of_Improvements,na.rm = T)
library(ggplot2)
# keeping non missing:
data=projectData[is.finite(projectData$Value_of_Improvements),]
#
# selecting a var:
var=data$Value_of_Improvements
#
# saving mean and sd:
mnVar=mean(var,na.rm = T)
sdVar=sd(var,na.rm = T)
#
#plotting
base = ggplot(data, aes(x=var))
hist = base + geom_histogram(fill="green",
color='grey',
aes(y=..density..))
#
histAndNormal = hist + stat_function(fun=dnorm,
color="red",
args=list(mean=mnVar,sd=sdVar))
#
histAndNormal
str(projectData)
res <- cor(projectData[,c(2:7)],use='complete.obs')
round(res, 2)
library(car)
scatterplotMatrix(projectData[,c(2:4)],
main="Simple Scatterplot Matrix")
projectData$Roof_Material_Name[projectData$Roof_Material==1] <- "Grass, Leaves, Bamboo"
projectData$Roof_Material_Name[projectData$Roof_Material==4] <- "Metal Sheets"
projectData=projectData[complete.cases(projectData),]
p <- ggplot(projectData, aes(Roof_Material_Name,Value_of_Improvements))
p + geom_boxplot() + labs(title="The Value of Improvements by Roof Material") + scale_x_discrete(name = "Roof Material") +
scale_y_continuous(name = "Value of Improvements\nMade to the Home")
projectData$Wall_Material_Name[projectData$Wall_Material==2] <- "Poles & Mud/Mud & Stones"
projectData$Wall_Material_Name[projectData$Wall_Material==4] <- "Mud Bricks"
projectData$Wall_Material_Name[projectData$Wall_Material==5] <- "Baked/Burnt Bricks"
projectData$Wall_Material_Name[projectData$Wall_Material==6] <- "Concrete, Cement, Stones"
projectData=projectData[complete.cases(projectData),]
p <- ggplot(projectData, aes(Wall_Material_Name,Value_of_Improvements))
p + geom_boxplot() + labs(title="The Value of Improvements by Wall Material")+scale_x_discrete(name = "Wall Material") +
scale_y_continuous(name = "Value of Improvements\nMade to the Home")
projectData$Floor_Material_Name[projectData$Floor_Material==1] <- "Earth"
projectData$Floor_Material_Name[projectData$Floor_Material==2] <- "Concrete, Cement, Tiles, Timber"
projectData=projectData[complete.cases(projectData),]
p <- ggplot(projectData, aes(Floor_Material_Name,Value_of_Improvements))
p + geom_boxplot() + labs(title="The Value of Improvements by Floor Material")+scale_x_discrete(name = "Floor Material") +
scale_y_continuous(name = "Value of Improvements\nMade to the Home")
length(projectData$Region_Code)==length(unique(projectData$Region_Code))
row.names(projectData)=projectData$Region_Code
str(projectData[,c(1:7)])
res2 <- cor(projectData[,c(4:7)],use='complete.obs')
round(res2, 2)
library(cluster)
demoSimi=daisy(projectData[,c(1:4,6)],metric = "euclidean",
stand=TRUE) # standardizing
demoClus=hclust(demoSimi,method = 'average')
plot(demoClus,cex=0.5)
plot(demoClus,cex=0.3)
rect.hclust(demoClus, k = 5,border = c('orange','blue','red','green','purple'))
demsil5=silhouette(cutree(demoClus, k = 5), demoSimi)
clust5solution=data.frame(matrix(demsil5,ncol = 3,dimnames =dimnames(demsil5)))
row.names(clust5solution)=projectData$Region_Code
clust5solution
# saving solution chosen
solution=clust5solution
# creating country column
solution$Region_Code=row.names(clust5solution)
row.names(solution)=NULL # resetting rownames
# merging
projectData=merge(projectData,solution)
str(projectData)
palette=c('blue','orange','red','green','purple')
scatterplotMatrix(projectData[,c(2:7)], diagonal='histogram',reg.line=NULL , smoother=NULL,groups = projectData$cluster,col = palette,legend.plot=F)
compressedMap= "https://github.com/efweavs1989/PUBPOL599B_Project/raw/master/TZA_adm_shp.zip"
library(utils)
temp=tempfile()
download.file(compressedMap, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
library(rgdal)
TZMap <- rgdal::readOGR("TZA_adm1.shp",stringsAsFactors=F) # use name
names(TZMap)
TZMap=TZMap[,c('ID_1')]
str(TZMap$ID_1)
TZMap$ID_1=as.numeric(TZMap$ID_1)
str(TZMap$ID_1)
contribTZmap=merge(TZMap,projectData, by.x='ID_1', by.y='Region_Code',all.x=F)
library(RColorBrewer)
library(classInt)
varToPLot=projectData$cluster
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="clusters"
shrinkLegend=0.4
title="Plot of Variable Clusters"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot=projectData$Value_of_Improvements
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="value of improvements"
shrinkLegend=0.4
title="Amount HH Spent on Improvements to the Home"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot=projectData$Value_of_Repairs
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="value of repairs"
shrinkLegend=0.4
title="Amount HH Spent on Repairs to the Home"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
varToPLot=projectData$MPesa_Use
numberOfClasses = 5
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPLot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
legendText="MPesa Use"
shrinkLegend=0.4
title="Does the HH Use Mobile Money (MPesa)"
plot(contribTZmap,col='purple',main=title)
plot(contribTZmap, col = colorPallette,border='grey',add=T)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
